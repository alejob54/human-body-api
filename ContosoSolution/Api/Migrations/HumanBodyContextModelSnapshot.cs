// <auto-generated />
using System;
using Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Api.Migrations
{
    [DbContext(typeof(HumanBodyContext))]
    partial class HumanBodyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Api.DTOs.NutrientDTO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Energy")
                        .HasColumnType("int");

                    b.Property<int>("Fiber")
                        .HasColumnType("int");

                    b.Property<int?>("NutrientTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NutrientTypeId");

                    b.ToTable("Nutrients");
                });

            modelBuilder.Entity("Api.DTOs.NutrientType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("NutrientType");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Name = "Macronutrient"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Micronutrient"
                        });
                });

            modelBuilder.Entity("Api.DTOs.NutrientDTO", b =>
                {
                    b.HasOne("Api.DTOs.NutrientType", "NutrientType")
                        .WithMany()
                        .HasForeignKey("NutrientTypeId");

                    b.Navigation("NutrientType");
                });
#pragma warning restore 612, 618
        }
    }
}
